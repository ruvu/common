#!/usr/bin/env python

# Copyright 2020 RUVU Robotics B.V.

import opc_ros
import rospy
from opc_msgs.msg import Colors
from std_msgs.msg import ColorRGBA


class OPCROS(object):
    def __init__(self, host, port, number_of_pixels, mock=False):
        if mock:
            self._client = opc_ros.TerminalMockClient()
        else:
            self._client = opc_ros.Client('{}:{}'.format(host, port))
        self._number_of_pixels = number_of_pixels
        self._colors_subscriber = rospy.Subscriber('cmd_colors', Colors, self._colors_callback, queue_size=1)
        self._color_subscriber = rospy.Subscriber('cmd_color', ColorRGBA, self._color_callback, queue_size=1)

    def _colors_callback(self, msg):
        if not msg.colors:
            rospy.logerr("OPC ROS expects a non empty array")
        else:
            self._client.put_pixels(opc_ros.get_color_array(msg.colors, self._number_of_pixels))

    def _color_callback(self, msg):
        self._client.put_pixels(opc_ros.get_color_array([msg], self._number_of_pixels))


if __name__ == '__main__':
    rospy.init_node('opc_ros')

    try:
        OPCROS(rospy.get_param('~host', 'localhost'),
               int(rospy.get_param('~port', 7890)),
               int(rospy.get_param('~number_of_pixels')),
               rospy.get_param('~mock', False))
        rospy.spin()
    except rospy.ROSInterruptException as e:
        rospy.logwarn(e)
    except RuntimeError as e:
        rospy.logerr(e)
