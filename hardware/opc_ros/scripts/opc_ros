#!/usr/bin/env python

import opc_ros
import rospy
from opc_msgs.msg import Colors


class OPCROS(object):
    def __init__(self, host, port, number_of_pixels):
        self._client = opc_ros.Client('{}:{}'.format(host, port))
        self._number_of_pixels = number_of_pixels
        self._subscriber = rospy.Subscriber('cmd_colors', Colors, self._colors_callback, queue_size=1)

    def _colors_callback(self, msg):
        if len(msg.colors) != self._number_of_pixels:
            rospy.logerr("OPC ROS expects an array of length {}, received length {}".format(self._number_of_pixels,
                                                                                            len(msg.colors)))
        else:
            self._client.put_pixels([(color.r * 255, color.b * 255, color.g * 255) for color in msg.colors])


if __name__ == '__main__':
    rospy.init_node('opc_ros')

    try:
        opc_ros = OPCROS(rospy.get_param('~host', 'localhost'),
                         int(rospy.get_param('~port', 7890)),
                         int(rospy.get_param('~number_of_pixels')))
        rospy.spin()
    except rospy.ROSInterruptException as e:
        rospy.logwarn(e)
    except RuntimeError as e:
        rospy.logerr(e)
