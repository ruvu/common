#!/usr/bin/env python

# MIT License
#
# Copyright (c) 2017 RUVU Robotics
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import image_geometry
import rospy

from image_recognition_msgs.msg import Recognitions
from sensor_msgs.msg import CameraInfo

from pepper_hardware import QiSession


class FaceDetector(object):
    def __init__(self):
        self._session = QiSession()
        self._face_detection = self._session.get_service("ALFaceDetection")
        self._mem = self._session.get_memory_wrapper()
        self._mem.subscribe(self._face_detection, "FaceDetected", self._face_detected_callback)

        self._subscriber = rospy.Subscriber("camera_info", CameraInfo, self._camera_info_callback, queue_size=1)
        self._camera_model = None

    def _camera_info_callback(self, msg):
        if self._camera_model is None:
            cam_model = image_geometry.PinholeCameraModel()
            cam_model.fromCameraInfo(msg)
            self._camera_model = cam_model

    def _face_detected_callback(self, data):
        if data and self._camera_model:
            time, detections, pose_in_torso_frame, pose_in_robot_frame, camera_id = data
            face_info_array = detections[:-1]

            for shape_info, extra_info in face_info_array:
                self._camera_model = PinholeCameraModel()

                x_angle, y_angle, width_angle, height_angle = shape_info


if __name__ == "__main__":
    rospy.init_node("face_detector")
    controller = FaceDetector()
    rospy.spin()
