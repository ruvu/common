#!/usr/bin/env python

# MIT License
#
# Copyright (c) 2017 RUVU Robotics
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import rospy
from hmi_msgs.msg import QueryAction, QueryGoal
import hmi
from actionlib import SimpleActionClient, GoalStatus
from pepper_hardware import Proxy

GRAMMAR_PREFIX = """#BNF+EMV1.1;
!grammar "grammar";
!start <start>;
!pronounce I PRONAS "i";
!pronounce I PRONAS "i";"""


def _truncate(data):
    return (data[:75] + '..') if len(data) > 75 else data


def _print_result(result):
    rospy.loginfo("Robot heard \x1b[1;42m'{}'\x1b[0m {}".format(result.sentence, result.semantics))


def _print_timeout():
    rospy.loginfo("Robot did not hear you \x1b[1;43m(timeout)\x1b[0m")


def _print_generic_failure():
    rospy.logerr("Robot did not hear you \x1b[1;37;41m(speech failed)\x1b[0m")


class Client(object):
    def __init__(self, name=None, simple_action_client=None):
        """
        Wrap the actionlib interface with the API
        """

        if not (bool(name) ^ bool(simple_action_client)):
            raise ValueError('name or simple_action_client should be set, but not both')

        if simple_action_client:
            self._client = simple_action_client
        else:
            self._client = SimpleActionClient(name, QueryAction)
            rospy.loginfo('waiting for "%s" server', name)
            self._client.wait_for_server()

        self._feedback = False
        self.last_talker_id = ""

    def _feedback_callback(self, feedback):
        rospy.loginfo("Received feedback")
        self._feedback = True

    def _wait_for_result_and_get(self, timeout=None):
        execute_timeout = rospy.Duration(timeout) if timeout else rospy.Duration(10)
        preempt_timeout = rospy.Duration(1)

        while not self._client.wait_for_result(execute_timeout):
            if not self._feedback:
                # preempt action
                rospy.logdebug("Canceling goal")
                self._client.cancel_goal()
                if self._client.wait_for_result(preempt_timeout):
                    rospy.loginfo("Preempt finished within specified preempt_timeout [%.2f]", preempt_timeout.to_sec());
                else:
                    rospy.logwarn("Preempt didn't finish specified preempt_timeout [%.2f]", preempt_timeout.to_sec());
                break
            else:
                self._feedback = False
                rospy.loginfo("I received feedback, let's wait another %.2f seconds" % execute_timeout.to_sec())

        state = self._client.get_state()
        if state != GoalStatus.SUCCEEDED:
            if state == GoalStatus.PREEMPTED:
                # Timeout
                _print_timeout()
                raise hmi.TimeoutException("Goal did not succeed within the time limit")
            else:
                _print_generic_failure()
                raise Exception("Goal did not succeed, it was: %s" % GoalStatus.to_string(state))

        return self._client.get_result()

    def _send_query(self, description, grammar, target):
        goal = QueryGoal(description=description, grammar=grammar, target=target)
        self._client.send_goal(goal, feedback_cb=self._feedback_callback)

    def query(self, description, grammar, target, timeout=10):
        """
        Perform a HMI query, returns a HMIResult
        """
        rospy.loginfo('Question: %s, grammar: %s', description, _truncate(grammar))

        self._send_query(description, grammar, target)
        answer = self._wait_for_result_and_get(timeout=timeout)

        self.last_talker_id = answer.talker_id  # Keep track of the last talker_id

        result = hmi.common.result_from_ros(answer)
        _print_result(result)
        return result


if __name__ == "__main__":
    rospy.init_node("speech_goal_publisher")
    speech_client = Client(name='speech_recognition')

    description = "Say 'Hey, Pepper!'"
    grammar = GRAMMAR_PREFIX + """
<start> : hey pepper;"""
    done = False

    pepper = Proxy()

    while not done:
        try:
            print "sending query"
            res = speech_client.query(description=description, grammar=grammar, target="", timeout=10)
        except hmi.TimeoutException:
            pass

        if res.sentence == 'hey pepper':
            description = "Hi there, how are you?"
            pepper.animated_speech.say("Hi there, how are you?")
            grammar = GRAMMAR_PREFIX + """
<start> : great | pretty good | life sucks;"""
            done = False
        elif res.sentence == 'great':
            pepper.animated_speech.say("Good for you. I'm a robot")
            done = True
        elif res.sentence == 'pretty good':
            pepper.animated_speech.say("That's nice")
            done = True
        elif res.sentence == 'life sucks':
            pepper.animated_speech.say("I know, right? Look at me, the're testing all this crappy software on me.")
            done = True
