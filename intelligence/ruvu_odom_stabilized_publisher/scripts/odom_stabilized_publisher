#!/usr/bin/env python
import numpy as np

import rospy
from geometry_msgs.msg import Quaternion
from sensor_msgs.msg import Imu
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from tf2_ros import (Buffer, TransformListener, TransformBroadcaster, LookupException, ConnectivityException,
                     ExtrapolationException)


def get_param(param_name, default):
    try:
        return rospy.get_param(param_name)
    except KeyError:
        rospy.loginfo("Parameter '%s not set, using default '%s'", param_name, default)
        return default


def xyzw_to_numpy(ori):
    return np.array((ori.x, ori.y, ori.z, ori.w))


class OdomStabilizedPubliser(object):
    def __init__(self):
        self.base_link = get_param('~base_link_frame', 'base_link')
        self.odom = get_param('~odom_frame', 'odom')
        self.odom_stabilized = get_param('~odom_stabilized_frame', 'odom_stabilized')

        self.tf_buffer = Buffer()
        self.listener = TransformListener(self.tf_buffer)

        self.broadcaster = TransformBroadcaster()

        # rospy.loginfo('wait for transform %s -> %s', self.base_link, self.odom)
        # self.tf_buffer.can_transform(self.base_link, self.odom, rospy.Time())

        # fill the tf buffer a little bit
        rospy.sleep(1)

        imu_topic = get_param('~imu_topic', 'imu')
        rospy.Subscriber(imu_topic, Imu, self.imu_callback)

    def imu_callback(self, data):
        imu_frame = data.header.frame_id
        try:
            # trans = self.tf_buffer.transform(data, self.odom, rospy.Duration(1))
            trans = self.tf_buffer.lookup_transform(imu_frame, self.odom, data.header.stamp, rospy.Duration(1))
        except (LookupException, ConnectivityException, ExtrapolationException) as e:
            rospy.logerr_throttle(5, e)
        else:
            q_imu = xyzw_to_numpy(data.orientation)
            q = xyzw_to_numpy(trans.transform.rotation)

            r, p, y = euler_from_quaternion(q_imu)
            q_stable = quaternion_from_euler(r, p, 0)

            rospy.logdebug('q: r=%.2f, p=%.2f, y=%.2f', *euler_from_quaternion(q))
            rospy.logdebug('q_imu: r=%.2f, p=%.2f, y=%.2f', *euler_from_quaternion(q_imu))
            rospy.logdebug('q_stable: r=%.2f, p=%.2f, y=%.2f', *euler_from_quaternion(q_stable))

            trans.child_frame_id = self.odom_stabilized
            trans.transform.rotation = Quaternion(*q_stable)

            self.broadcaster.sendTransform(trans)


def main():
    rospy.init_node('odom_stabilized_publisher')
    OdomStabilizedPubliser()
    rospy.spin()


if __name__ == '__main__':
    main()
