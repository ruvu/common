#!/usr/bin/env python
import numpy as np

import rospy
from geometry_msgs.msg import Quaternion, Vector3, Transform, TransformStamped
from sensor_msgs.msg import Imu
from tf.transformations import euler_from_quaternion, quaternion_from_euler, quaternion_multiply
from tf2_ros import (Buffer, TransformListener, TransformBroadcaster, LookupException, ConnectivityException,
                     ExtrapolationException, Header, TFMessage)


def get_param(param_name, default):
    try:
        return rospy.get_param(param_name)
    except KeyError:
        rospy.loginfo("Parameter '%s not set, using default '%s'", param_name, default)
        return default


class Frame2dPubliser(object):
    def __init__(self, base_frame, world_frame, world_2d_frame, queue_size=None):
        self.base_frame = base_frame
        self.world_frame = world_frame
        self.world_2d_frame = world_2d_frame

        self.broadcaster = TransformBroadcaster()
        self.tf_sub = rospy.Subscriber("/tf", TFMessage, self.tf_callback, queue_size=queue_size)

        rospy.loginfo('Waiting for transform...')
        self.startup_message_shown = False

    def tf_callback(self, data):
        for transform in data.transforms:
            if transform.header.frame_id == self.world_frame and transform.child_frame_id == self.base_frame:
                self.transform_callback(transform)

    def transform_callback(self, data):
        if not self.startup_message_shown:
            self.startup_message_shown = True
            rospy.loginfo('Started')

        transform = Transform()
        transform.translation = Vector3(x=0, y=0, z=data.transform.translation.z)
        transform.rotation = Quaternion(w=1)
        ts = TransformStamped(header=data.header, child_frame_id=self.world_2d_frame, transform=transform)
        self.broadcaster.sendTransform(ts)


def main():
    rospy.init_node('frame_2d_publisher')
    Frame2dPubliser(
        base_frame=get_param('~base_frame', 'base_link'),
        world_frame=get_param('~world_frame', 'odom'),
        world_2d_frame=get_param('~world_2d_frame', 'odom_2d'),
        queue_size=10)
    rospy.spin()


if __name__ == '__main__':
    main()
