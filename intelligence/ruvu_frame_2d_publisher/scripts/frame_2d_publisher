#!/usr/bin/env python

# Copyright 2020 RUVU Robotics B.V.

import rospy
from geometry_msgs.msg import Quaternion, Vector3, Transform, TransformStamped
from tf2_ros import (Buffer, TransformListener, TransformBroadcaster, LookupException, ConnectivityException,
                     ExtrapolationException)


def get_param(param_name, default):
    try:
        return rospy.get_param(param_name)
    except KeyError:
        rospy.loginfo("Parameter '%s not set, using default '%s'", param_name, default)
        return default


class Frame2dPubliser(object):
    def __init__(self, base_frame, world_frame, world_2d_frame):
        self.base_frame = base_frame
        self.world_frame = world_frame
        self.world_2d_frame = world_2d_frame

        self.broadcaster = TransformBroadcaster()

        self.tf_buffer = Buffer()
        self.tf_listener = TransformListener(self.tf_buffer)

        # fill the tf buffer a little bit
        rospy.sleep(1)

    def spin(self):
        # tf internally spins at 20Hz, so we don't need to do that
        while not rospy.is_shutdown():
            try:
                # wait until a transform is published with time == now
                tf = self.tf_buffer.lookup_transform(self.world_frame, self.base_frame, rospy.Time.now(),
                                                     rospy.Duration(5))
            except (LookupException, ConnectivityException, ExtrapolationException) as e:
                rospy.logerr("tf2 exception: %s", e.message)
            else:
                self.transform_callback(tf)

    def transform_callback(self, data):
        transform = Transform()
        transform.translation = Vector3(x=0, y=0, z=data.transform.translation.z)
        transform.rotation = Quaternion(w=1)
        ts = TransformStamped(header=data.header, child_frame_id=self.world_2d_frame, transform=transform)
        self.broadcaster.sendTransform(ts)


def main():
    rospy.init_node('frame_2d_publisher')
    fp = Frame2dPubliser(
        base_frame=get_param('~base_frame', 'base_link'),
        world_frame=get_param('~world_frame', 'odom'),
        world_2d_frame=get_param('~world_2d_frame', 'odom_2d')
    )
    fp.spin()


if __name__ == '__main__':
    main()
