#!/usr/bin/env python

import argparse
import json
import time

import pika

parser = argparse.ArgumentParser(description='Send a rabbitmq json message over a queue')
parser.add_argument('--host', type=str, default='localhost', help='The RabbitMQ host')
parser.add_argument('--username', type=str, default='', help='The RabbitMQ username')
parser.add_argument('--password', type=str, default='', help='The RabbitMQ password')
parser.add_argument('--rate', type=float, default=0, help='The rate of sending')
parser.add_argument('--heartbeat', type=float, default=0, help='Heartbeat check for contacting the server')
parser.add_argument('queue_name', metavar='QUEUE', type=str, help='RabbitMQ queue name')
parser.add_argument('msg', metavar='MSG', type=str, help='JSON string to send over the queue')

args = parser.parse_args()

# Setup RabbitMQ connection
if args.username:
    parameters = pika.ConnectionParameters(host=args.host, heartbeat=args.heartbeat,
                                           credentials=pika.PlainCredentials(args.username, args.password))
else:
    parameters = pika.ConnectionParameters(host=args.host, heartbeat=args.heartbeat)

connection = pika.BlockingConnection(parameters)
channel = connection.channel()
channel.queue_declare(queue=args.queue_name)

# Make sure we have valid json
dictionary = json.loads(args.msg)

if args.rate > 0:
    print "Sending {} to queue {} with a rate of {}hz".format(dictionary, args.queue_name, args.rate)
    while True:
        channel.basic_publish(exchange='', routing_key=args.queue_name, body=json.dumps(dictionary))
        time.sleep(1 / args.rate)
else:
    print "Sending {} to queue {}".format(dictionary, args.queue_name)
    channel.basic_publish(exchange='', routing_key=args.queue_name, body=json.dumps(dictionary))

connection.close()
