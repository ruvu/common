#!/usr/bin/env python
import tf
import networkx as nx
import sys
from argparse import ArgumentParser, FileType

from geometry_msgs.msg import Pose, Point, Quaternion

parser = ArgumentParser()

parser.add_argument('--x0', type=float, default=0, help='X origin')
parser.add_argument('--y0', type=float, default=0, help='Y origin')

parser.add_argument('--rows', type=int, default=5, help='Amount of rows')
parser.add_argument('--cols', type=int, default=5, help='Amount of columns')

parser.add_argument('--row-size', type=float, default=1.5, help='Row size (m)')
parser.add_argument('--col-size', type=float, default=1.5, help='Column size (m)')

parser.add_argument('outfile', nargs='?', type=FileType('w'), default=sys.stdout)

args = parser.parse_args()

x0 = args.x0
y0 = args.y0

rows = args.rows
cols = args.cols

row_size = args.row_size
col_size = args.col_size

outfile = args.outfile

G = nx.DiGraph()

for i in range(rows):
    for j in range(cols):
        x = x0 + i * row_size
        y = y0 + j * col_size
        q = tf.transformations.quaternion_from_euler(0, 0, 1.57)
        ps = Pose(position=Point(x=x, y=y), orientation=Quaternion(*q))
        G.add_node(i * rows + j, pose=ps)

nx.write_yaml(G, outfile)
