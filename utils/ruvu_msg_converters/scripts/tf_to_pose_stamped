#!/usr/bin/env python

# Copyright 2020 RUVU Robotics B.V.

import os

import rospy
import tf2_ros
from geometry_msgs.msg import PoseStamped, Pose, Point


def vector3_to_point(vector3):
    return Point(x=vector3.x, y=vector3.y, z=vector3.z)


def transform_to_pose_stamped(transform):
    pose = Pose(position=vector3_to_point(transform.transform.translation), orientation=transform.transform.rotation)
    return PoseStamped(header=transform.header, pose=pose)


if __name__ == '__main__':
    rospy.init_node(os.path.basename(__file__))

    buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(buffer)

    pose_pub = rospy.Publisher('pose', PoseStamped, queue_size=1)

    target_frame = rospy.get_param('~target_frame')
    source_frame = rospy.get_param('~source_frame')

    # let the tf buffer fill a bit
    while not buffer.can_transform(target_frame, source_frame, rospy.Time(0), rospy.Duration(5)):
        if rospy.is_shutdown():
            exit()
        rospy.loginfo('still waiting for transform %s to %s', target_frame, source_frame)

    rospy.loginfo('%s started', rospy.get_name())

    rate = rospy.Rate(10.0, reset=True)
    while not rospy.is_shutdown():
        try:
            transform = buffer.lookup_transform(target_frame, source_frame, rospy.Time())
            pose_pub.publish(transform_to_pose_stamped(transform))
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
            rospy.logerr(e)
        rate.sleep()
