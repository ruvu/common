#!/usr/bin/env python

# Copyright 2020 RUVU Robotics B.V.

import rospy
import sys
from sensor_msgs.msg import Imu


def imu_cb(msg):
    """
    Imu message callback, this method rewrites the covariance and publishes the updated message
    :param msg: Incoming sensor_msgs/Imu message
    """
    # list the indices of the diagonal elements in the (row-major ordered) covariance array
    diagonal_indices = [0, 4, 8]

    if orientation_covariance_diagonal:
        # Create a list of the existing covariance to be able to change its elements
        orientation_cov_list = list(msg.orientation_covariance)

        # Write the diagonal elements from the parameter to the diagonal elements of the covariance list
        for index, element in zip(diagonal_indices, orientation_covariance_diagonal):
            orientation_cov_list[index] = element

        # Write the new covariance list to the message as a tuple
        msg.orientation_covariance = tuple(orientation_cov_list)

    # Do the same for rotational velocity
    if rotational_velocity_covariance_diagonal:
        rotational_velocity_covariance_list = list(msg.rotational_velocity_covariance)
        for index, element in zip(diagonal_indices, rotational_velocity_covariance_diagonal):
            rotational_velocity_covariance_list[index] = element
        msg.twist.covariance = tuple(rotational_velocity_covariance_list)

    # Do the same for linear acceleration
    if linear_acceleration_covariance_diagonal:
        linear_acceleration_covariance_list = list(msg.linear_acceleration_covariance)
        for index, element in zip(diagonal_indices, linear_acceleration_covariance_diagonal):
            linear_acceleration_covariance_list[index] = element
        msg.twist.covariance = tuple(linear_acceleration_covariance_list)

    # Publish the message on the output topic
    odom_pub.publish(msg)


if __name__ == '__main__':
    rospy.init_node('rewrite_imu_covariance')
    odom_pub = rospy.Publisher('imu/data_covariance_rewritten', Imu, queue_size=10)

    # Get the diagonal elements to write to the odom covariance from the ROS param server
    orientation_covariance_diagonal = rospy.get_param('~orientation_covariance_diagonal', None)
    rotational_velocity_covariance_diagonal = rospy.get_param('~rotational_velocity_covariance_diagonal', None)
    linear_acceleration_covariance_diagonal = rospy.get_param('~linear_acceleration_covariance_diagonal', None)

    # Check whether these have the correct lengths
    if orientation_covariance_diagonal is not None and len(orientation_covariance_diagonal) is not 3:
        rospy.logfatal("Parameter ~orientation_covariance_diagonal must have length 3. Length is {}."
                       .format(len(orientation_covariance_diagonal)))
        sys.exit(1)

    if rotational_velocity_covariance_diagonal is not None and len(rotational_velocity_covariance_diagonal) is not 3:
        rospy.logfatal("Parameter ~rotational_velocity_covariance_diagonal must have length 3. Length is {}."
                       .format(len(rotational_velocity_covariance_diagonal)))
        sys.exit(1)

    if linear_acceleration_covariance_diagonal is not None and len(linear_acceleration_covariance_diagonal) is not 3:
        rospy.logfatal("Parameter ~linear_acceleration_covariance_diagonal must have length 3. Length is {}."
                       .format(len(linear_acceleration_covariance_diagonal)))
        sys.exit(1)

    odom_sub = rospy.Subscriber('imu/data', Imu, callback=imu_cb)

    rospy.spin()
