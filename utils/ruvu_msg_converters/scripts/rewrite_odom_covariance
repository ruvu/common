#!/usr/bin/env python

import rospy
import sys
from nav_msgs.msg import Odometry


def odom_cb(msg):
    """
    Odometry message callback, this method rewrites the covariance and publishes the updated message
    :param msg: Incoming odometry message
    """

    # list the indices of the diagonal elements in the (row-major ordered) covariance array
    diagonal_indices = [0, 7, 14, 21, 28, 35]

    # Create a list of the existing covariance to be able to change its elements
    pose_cov_list = list(msg.pose.covariance)

    # Write the diagonal elements from the parameter to the diagonal elements of the covariance list
    for index, element in zip(diagonal_indices, pose_covariance_diagonal):
        pose_cov_list[index] = element

    # Write the new covariance list to the message as a tuple
    msg.pose.covariance = tuple(pose_cov_list)

    # Do the same for velocity
    vel_cov_list = list(msg.twist.covariance)
    for index, element in zip(diagonal_indices, twist_covariance_diagonal):
        vel_cov_list[index] = element
    msg.twist.covariance = tuple(vel_cov_list)

    # Publish the message on the output topic
    odom_pub.publish(msg)


if __name__ == '__main__':
    rospy.init_node('rewrite_odom_covariance')
    odom_pub = rospy.Publisher('odom_covariance_rewritten', Odometry, queue_size=10)

    # Get the diagonal elements to write to the odom covariance from the ROS param server
    pose_covariance_diagonal = rospy.get_param('~pose_covariance_diagonal')
    twist_covariance_diagonal = rospy.get_param('~twist_covariance_diagonal')

    # Check whether these have the correct lengths
    if len(pose_covariance_diagonal) is not 6:
        rospy.logfatal("Parameter ~pose_covariance_diagonal must have length 6. Length is {}"
                       .format(len(pose_covariance_diagonal)))
        sys.exit(1)

    if len(twist_covariance_diagonal) is not 6:
        rospy.logfatal("Parameter ~twist_covariance_diagonal must have length 6. Length is {}"
                       .format(len(twist_covariance_diagonal)))
        sys.exit(1)

    odom_sub = rospy.Subscriber('odom', Odometry, callback=odom_cb)

    rospy.spin()
