#!/usr/bin/env python

# Copyright 2020 RUVU Robotics B.V.

import PyKDL
import rospy
import tf2_ros
from geometry_msgs.msg import Vector3, Quaternion
from nav_msgs.msg import Odometry


def _pose_stamped_to_kdl(msg):
    """
    Convert a pose stamped to a KDL frame
    :param msg: geoemtry_msgs/PoseStamped
    :return: a KDL frame
    """
    return PyKDL.Frame(PyKDL.Rotation.Quaternion(msg.pose.orientation.x, msg.pose.orientation.y,
                                                 msg.pose.orientation.z, msg.pose.orientation.w),
                       PyKDL.Vector(msg.pose.position.x, msg.pose.position.y, msg.pose.position.z))


def odom_callback(msg):
    """
    Odometry callback that needs to be republished over the /tf topic
    :param msg: Incoming odometry
    """
    kdl_pose = _pose_stamped_to_kdl(msg.pose)

    if publish_as_child:
        header_frame_id = msg.child_frame_id
        child_frame_id = msg.header.frame_id
        kdl_pose = kdl_pose.Inverse()
    else:
        header_frame_id = msg.header.frame_id
        child_frame_id = msg.child_frame_id

    t = tf2_ros.TransformStamped()
    t.header.stamp = msg.header.stamp
    t.header.seq = msg.header.seq
    t.header.frame_id = header_frame_id
    t.child_frame_id = child_frame_id
    t.transform.translation = Vector3(*kdl_pose.p)
    t.transform.rotation = Quaternion(*kdl_pose.M.GetQuaternion())

    broadcaster.sendTransform(t)


if __name__ == '__main__':
    rospy.init_node("odom_to_tf")
    sub = rospy.Subscriber("odom", Odometry, odom_callback)
    broadcaster = tf2_ros.TransformBroadcaster()
    publish_as_child = rospy.get_param("~publish_as_child", False)
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
