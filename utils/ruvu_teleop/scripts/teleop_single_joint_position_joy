#!/usr/bin/env python
import rospy

from control_msgs.msg import SingleJointPositionAction, SingleJointPositionGoal
from sensor_msgs.msg import Joy
import actionlib


def callback(msg):
    for button, position in button_mapping.items():
        if button < len(msg.buttons) and msg.buttons[button] == 1:
            if button_mapping_first_pressed[button] is None:
                rospy.loginfo("Initial press button %d", button)
                button_mapping_first_pressed[button] = rospy.Time.now()
        else:
            button_mapping_first_pressed[button] = None

        if button_mapping_first_pressed[button] is not None:
            if (rospy.Time.now() - button_mapping_first_pressed[button]).to_sec() > press_time:
                goal = SingleJointPositionGoal(position=position)
                rospy.loginfo("Sending SingleJointPositionGoal position = {}".format(position))
                client.send_goal(goal)
                client.wait_for_result()
                rospy.loginfo("Done")
                button_mapping_first_pressed[button] = None
            else:
                rospy.logdebug("Button %d still pressed ...", button)


if __name__ == "__main__":
    rospy.init_node('teleop_single_joint_position_joy')

    sub = rospy.Subscriber('joy', Joy, callback, queue_size=1)

    button_index_positions = rospy.get_param("~button_index_positions")
    press_time = rospy.get_param("~press_time", 1.0)

    button_mapping = dict((int(e["button_index"]), float(e["position"])) for e in button_index_positions)
    button_mapping_first_pressed = {k: None for k in button_mapping}
    rospy.loginfo("Using button index position mapping: {}".format(button_mapping))

    client = actionlib.SimpleActionClient('lift', SingleJointPositionAction)

    # Waits until the action server has started up and started
    rospy.loginfo("Waiting for action server ...")
    client.wait_for_server()
    rospy.loginfo("Connected")
    rospy.spin()
