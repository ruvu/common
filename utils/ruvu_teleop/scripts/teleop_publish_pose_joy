#!/usr/bin/env python
import rospy

from sensor_msgs.msg import Joy
from geometry_msgs.msg import PoseStamped, Pose, Point
import tf2_ros

# We need to keep track of the last buttons since we only want to react on a rising event
last_buttons = []


def joy_callback(msg):
    global last_buttons
    for button, pose_info in button_mapping.iteritems():
        # Check if button is rising
        if button < len(msg.buttons) and msg.buttons[button] == 1 and msg.buttons[button] != last_buttons[button]:
            # pose_info["publisher"].publish(pose)
            tf_buffer = tf2_ros.Buffer()
            tf2_ros.TransformListener(tf_buffer)

            try:
                trans = tf_buffer.lookup_transform(pose_info["frame_id"], pose_info["child_frame_id"],
                                                   rospy.Time(0), rospy.Duration(transform_timeout))
            except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
                rospy.logerr("Failed to lookup transform: {}".format(str(e)))
            else:
                pose_info["pub"].publish(PoseStamped(header=trans.header,
                                                     pose=Pose(position=Point(
                                                         x=trans.transform.translation.x,
                                                         y=trans.transform.translation.y,
                                                         z=trans.transform.translation.z
                                                     ), orientation=trans.transform.rotation)))
    last_buttons = msg.buttons


if __name__ == "__main__":
    rospy.init_node('teleop_publish_pose_joy')

    button_index_pose_publishers = rospy.get_param("~button_index_pose_publishers")
    transform_timeout = float(rospy.get_param("~transform_timeout", 5.0))

    sub = rospy.Subscriber('joy', Joy, joy_callback, queue_size=1)

    # Construct the button_mapping for easy lookup of publishers and parameters in the callback method
    button_mapping = {int(e['button_index']): dict(
        pub=rospy.Publisher(e["topic"], PoseStamped, queue_size=1),  # Instantiate a publisher on specified topic
        **e  # Copy the original dict
    ) for e in button_index_pose_publishers}

    rospy.loginfo("Using button index pose publisher mapping: {}".format(button_mapping))

    rospy.spin()
